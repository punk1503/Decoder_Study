<FlowDocument xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
              xmlns:local="clr-namespace:Decoder_Study.Paragraphs"
              ColumnWidth="400" FontSize="14" FontFamily="Georgia">
    <Paragraph>
        <Bold>XOR Шифрование</Bold>
    </Paragraph>
    <Paragraph>
        XOR Шифрование - алгоритм использующий логическую операцию Исключающего Или для сокрытия данных к каждому символу исходного текста при помощи
        заданного ключа.
    </Paragraph>
    <Paragraph>
        <Bold>Принцип</Bold>
    </Paragraph>
    <Paragraph>
        Как уже было сказано выше, XOR Шифрование применяет Исключающее Или к каждой букву сообщения. Если говорить подробнее, то данный метод шифрования
        берет букву текста, берет ее код по ASCII таблице, переводит его в двоичную систему счисления. Далее это же повторяется для буквы секретного ключа.
        И последним шагом Исключающее или применяется к каждой цифре этих двух записей. Так мы получаем новое число, которое переводится уже в 16-ричную систему для удобства.
        Рассмотрим простой пример: зашифруем строчку 'abcd' ключом 'c'. XOR ключ также называется
        <Italic>Фениксом</Italic> . Феникс "растягивается" на всю длину сообщения.
        Таким образом наш феникс - это по сути 'cccc', так как длина сообщения - 4.
        Возьмем первый символ - 'a'. Его ASCII код - 97 или 1100001 в двоичной. 'c' - 99 - 1100011
        Если мы запишем эти 2 числа друг под другом и используем Исключающее Или, то получим 0000010, что равняется 2 в десятеричной или 16-ричной системе.
        02 - первое значение нашего шифрованного сообщения. Стоит заметить, что 02 в ASCII таблице - это невидимый спец. символ, но нам это не очень важно, ведь мало
        кто оперирует с чистыми читаемыми символами при XOR шифровании.
        Проделаем ту же операцию с буквами 'bcd' и 'c'. Получим 02 01 00 07. Можете проверить это в программе. Важно помнить, что это
        <Bold>16-ричные значения</Bold> .
    </Paragraph>
    <Paragraph>
        <Bold>Особенности реализации</Bold>
    </Paragraph>
    <Paragraph>
        В данной программе XOR представлен в своем самом каноничном виде. При шифровании стоит указывать строчку из любых латинских символов, цифр, знаков.
        Кириллица и другие нестандартные символы не поддерживается. При дешифровании требуется указать последовательность шестнадцатеричных значений через пробел.
        Каждое значение состоит из двух символов, то есть вместо 16-ричного числа 10 - символа 'a' нужно писать '0a'.
    </Paragraph>
    <Paragraph>
        <Bold>Уязвимости</Bold>
    </Paragraph>
    <Paragraph>
        Так как алгоритм простой, уязвимостей у него не очень много, но они существенные.
        Первая - знание ключа. Так как при применении ключа к шифротексту мы получим исходное сообщение.
        Вторая - подбор ключа. Подбор ключа может стать не очень сложной задачей, особенно если мы знаем, например, один символ или длину ключа
    </Paragraph>
    <Paragraph>
        <Bold>Применение</Bold>
    </Paragraph>
    <Paragraph>
        XOR используют для шифрования любых строковых данных. Как пример: пароли пользователей и подобная информация.
        Но в современных системах XOR либо используется многократно, либо не используется вовсе, уступая более сложным алгоритмам.
    </Paragraph>
</FlowDocument>